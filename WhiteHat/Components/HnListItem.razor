@using System.Text.RegularExpressions
@using WhiteHat.Models
@using WhiteHat.Services
@inject HNFetcher HNFetcher

@if(Loader) {
    <div class="hnitem-list-item ghost">
        <div class="content">
            <h1 class="index">
                @Index
            </h1>
            <div class="main">
                <h2>
                    loading...
                </h2>
            </div>
            <div class="details">
                <div></div>
                <div></div>
                <div></div>
            </div>
        </div>
    </div>
}
else {
    <div class="hnitem-list-item" id="@Item?.Id">
        <div class="content default @(Item.ShowComments ? "show-comments" : string.Empty) @(string.IsNullOrEmpty(Item?.Url?.ToString())?string.Empty:"clickable")" @onclick=ItemClicked @onclick:stopPropagation=true>
            <h1 class="index @((Selected is not null && Selected.Id == Item.Id) || (SelectedIndex == Item?.Index - 1) ? "opened" : string.Empty)">
                @(Item.Index <= 0 ? Index : Item.Index)
            </h1>
            <div class="main">
                @if (Item.Url is not null)
                {
                    string url = Item.Url.Host;
                    <div class="link-container">
                        <a target="_blank" href="@(Item.Url == null ? "" : Item.Url.AbsoluteUri)">
                            @(url.StartsWith("www.") ? url.Substring(4) : url)
                            <div class="icon">
                                <span class="inwindow material-icons-round">
                                    vertical_split
                                </span>
                                <span class="newwindow material-icons-round">
                                    open_in_new
                                </span>
                            </div>
                        </a>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Item.Hit?.HighlightResult?.Title?.Value))
                {
                    <h2>
                        @((MarkupString)Item.Hit.HighlightResult.Title.Value)
                    </h2>
                }
                else{
                    <h2>
                        @Item.Title
                    </h2>
                }
            </div>
            @if(!string.IsNullOrWhiteSpace(Item.Text)){
                <div class="text @(Item.ShowExpand ? "text-expanded" : string.Empty)">
                    <span @onclick=ToggleExpand @onclick:preventDefault=true @onclick:stopPropagation=true>
                        <span class="material-icons-round">
                            @(Item.ShowExpand ? "expand_less" : "expand_more")
                        </span>
                        @(Item.ShowExpand ? "Collapse" : "Expand")

                    </span>
                    <div class="text-content">
                        @(Item.ShowExpand ? (MarkupString)Item.Text : (MarkupString)StripHTML(Item.Text))
                    </div>
                </div>
            }
            <div class="details">
                @if (Item.Points.HasValue)
                {
                    <div class="score">
                        @Item.Points
                        <span>
                            point@(Item.Points > 1 ? "s" : string.Empty)
                        </span>
                    </div>
                }
                <div>
                    <span class="material-icons-round">
                        schedule
                    </span>
                    @Item.TimeSince()
                </div>
                @if (!string.IsNullOrEmpty(Item.Author))
                {
                    <div>
                        <span class="material-icons-round">
                            person
                        </span>
                        @Item.Author
                    </div>
                }
                @if (Item.Children is not null && Item.Children.Any())
                {
                    <div class="action" @onclick=@ToggleComments @onclick:preventDefault=true @onclick:stopPropagation=true>
                        <span class="material-icons-round">
                            mode_comment
                        </span>
                        @(Item.KidCount >= 0 ? Item.KidCount - 1 : "")
                    </div>
                }
            </div>
        </div>
        @if (Item.ShowComments)
        {
            <div class="comments" @onclick:preventDefault=true @onclick:stopPropagation=true>
                @foreach (var kid in Item.Children)
                {
                    @if (kid is not null && !string.IsNullOrWhiteSpace(kid.Text) && !string.IsNullOrWhiteSpace(kid.Author))
                    {
                        <HnListItemComment Item="kid" Op="@Item.Author" />
                    }
                }
            </div>
        }
    </div>
}


