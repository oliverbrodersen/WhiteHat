@using WhiteHat.Misc
@using WhiteHat.Enums
@using WhiteHat.Services
@inject StorageService Storage
@inject IJSRuntime JSRuntime
@inject IframeCheckerService IframeCheckerService
@implements IDisposable


<div class="container @(SelectedItem is not null ? "open" : string.Empty) @(_paneSize)">
<div class="items-container" id="list">
    @if(Origin == WhiteHatPages.Index && _settings != null)
    {
        @* <InfoListItem Hide=_settings.DismissWelcome Close=@DismissWelcome> *@
            <InfoListItem Hide=_settings.DismissWelcome Close=@DismissWelcome>
            <div class="row">
                <div class="col">
                    <h2>
                        Hi, Welcome to White Hat!
                    </h2>
                    <p>
                        An improved Hacker News client
                    </p>
                </div>
                <div class="row features">
                    <div class="feature">
                        <h4>
                            Single tab
                        </h4>
                        <span class="material-icons-round">
                            tab
                        </span>
                    </div>
                    <div class="feature">
                        <h4>
                            Keyboard navigation
                        </h4>
                        <span class="material-icons-round">
                            keyboard
                        </span>
                    </div>
                    <div class="feature">
                        <h4>
                            Improved search
                        </h4>
                        <span class="material-icons-round">
                            travel_explore
                        </span>
                    </div>
                </div>
                @* <div class="img">
                <img src="/img/hand.png" alt="Hand waving hello"/>
                </div> *@
            </div>
        </InfoListItem>
    }
    @if (List is null || List.Count < 0)
    {
        <HnListItem Index="1" Loader="true"></HnListItem>
        <button class="loadmore loading" @onclick=LoadStories>
            <span class="loader"></span>
            Loading
        </button>
    }
    else
    {
        <Virtualize Items="List" Context="item">
            <HnListItem Item="item"
                        OpenLink=@(x => OpenItem(x))
                        Selected=SelectedItem
                        SelectedIndex=_selectedIndex
                        Origin=Origin>
            </HnListItem>
        </Virtualize>

        @if (IsLoading)
        {
            <HnListItem Index="List.Count() + 1" Loader="true" Origin=Origin></HnListItem>
            <button class="loadmore loading" @onclick=LoadStories>
                <span class="loader"></span>
                Loading
            </button>
        }
        else if (!NoMoreToLoad)
        {
            <button class="loadmore" @onclick=LoadStories>
                Load more
            </button>
        }
    }
    <div class="footer">
        <div class="actions">
            <button onclick="CookieConsent.show(true);">
                Cookies
            </button>
            <span>
                •
            </span>
            <p>
                By
                <a href="https://oliver-brodersen.com?utm_source=white-hat.io&utm_medium=referral&utm_campaign=footer">
                    me
                </a>
            </p>
            <span>
                •
            </span>
            <ThemeToggle></ThemeToggle>
        </div>
        <p>
            v@(Constants.CurrentVersion)
        </p>
    </div>
</div>
    <div class="link-pane-container">
        <div class="link-pane">
            <div class="pane-header">
                <div class="group">
                    <div class="toggle-buttons" @onclick=ToggleContent>
                        <button class="@(!_isComments ? "active" : "")">
                            <p>
                                Site
                            </p>
                            <span class="material-icons-round">
                                language
                            </span>
                        </button>
                        <button class="@(_isComments ? "active" : "")">
                            <p>
                                Comments
                            </p>
                        </button>
                    </div>
                    <div class="toggle-buttons">
                        <button class="@(_paneSize == PaneSize.Slim ? "active" : "")" @onclick=@(() => SetPrevSize(PaneSize.Slim))>
                            <p>
                                Slim
                            </p>
                            <span class="material-icons-round rotate">
                                unfold_less
                            </span>
                        </button> 
                        <button class="@(_paneSize == PaneSize.Split ? "active" : "")" @onclick=@(() => SetPrevSize(PaneSize.Split))>
                            <p>
                                Split
                            </p>
                            <span class="material-icons-round">
                                vertical_split
                            </span>
                        </button>
                        <button class="rotate @(_paneSize == PaneSize.Wide ? "active" : "")" @onclick=@(() => SetPrevSize(PaneSize.Wide))>
                            <p>
                                Wide
                            </p>
                            <span class="material-icons-round rotate">
                                unfold_more
                            </span>
                        </button>
                    </div>
                    @* <button @onclick=TogglePrevSize>
                        <p>
                            @GetPaneButtonSizeText()
                        </p>
                        <span class="material-icons-round rotate @(_paneSize.Next())">
                            @GetPaneButtonSizeIcon()
                        </span>
                    </button> *@
                    <button @onclick=@(() => ScrollToItem(SelectedItem.Id))>
                        <p>
                            Scroll to post
                        </p>
                        <span class="material-icons-round">
                            swipe_vertical
                        </span>
                    </button>
                </div>
                <div class="group">
                    <button class="round" @onclick=@(() => HandleUp(true))>
                        <span class="material-icons-round">
                            arrow_upward
                        </span>
                    </button>
                    <button class="round" @onclick=@(() => HandleDown(true))>
                        <span class="material-icons-round">
                            arrow_downward
                        </span>
                    </button>
                    <button @onclick=Reload class="round refresh">
                        <span class="material-icons-round">
                            refresh
                        </span>
                    </button>
                    <button class="round" @onclick=OpenInNewTab>
                        <span class="material-icons-round">
                            open_in_new
                        </span>
                    </button>
                    <button class="round close" @onclick=CloseLinkPane>
                        <span class="material-icons-round">
                            close
                        </span>
                    </button>
                </div>
            </div>
            @if (SelectedItem is not null)
            {
                <h3>
                    @SelectedItem.Title
                    @if (_isIframeLoading && !_isComments)
                    {
                        <button id="loader" class="loadmore loading small" @onclick=StateHasChanged>
                            <span class="loader"></span>
                        </button>
                    }
                </h3>
                <div class="iframe-container">
                    @if (_isComments)
                    {
                        <div class="comments">
                            @if (SelectedItem.Children is null || !SelectedItem.Children.Any())
                            {
                                <p class="no-comments">
                                    No comments yet
                                </p>
                            }
                            else
                            {
                                <Virtualize Items="SelectedItem.Children.Where(c => c is not null && !string.IsNullOrWhiteSpace(c.Text) && !string.IsNullOrWhiteSpace(c.Author)).ToList()" Context="kid">
                                    <HnListItemComment Item="kid" Op="@SelectedItem.Author" />
                                </Virtualize>                                
                            }
                        </div>
                    }
                    else
                    {
                        <iframe id="itemPreview"
                                 src=@SelectedItem.EmbedUrl
                                 @onload=IFrameLoaded
                                 title=@SelectedItem.Title
                                 sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation"
                                 frameborder="0"
                                 data-theme=@_theme;
                                 class="@(_isFrameOpen?string.Empty:"hidden")"
                                 allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                 allowfullscreen>
                        </iframe>
                        <button id="frameLoader" class="loadmore loading @(_isFrameOpen?"hidden":string.Empty)" @onclick=StateHasChanged>
                            <span class="loader"></span>
                            Loading
                        </button>
                    }
                </div>
            }
        </div>
    </div>
</div>

